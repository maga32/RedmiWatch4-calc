<template>
    <div class="calculator-grid">
      <div class="output">
        <div class="previous-operand"></div>
        <div class="current-operand"></div>
      </div>
      <button class="span-two all-clear">AC</button>
      <button class="delete">DEL</button>
      <button class="operation">รท</button>
      <button class="number">1</button>
      <button class="number">2</button>
      <button class="number">3</button>
      <button class="operation">x</button>
      <button class="number">4</button>
      <button class="number">5</button>
      <button class="number">6</button>
      <button class="operation">+</button>
      <button class="number">7</button>
      <button class="number">8</button>
      <button class="number">9</button>
      <button class="operation">-</button>
      <button class="number">.</button>
      <button class="number">0</button>
      <button class="span-two equals">=</button>
    </div>
</template>
  
  <script>
  class Calculator {
    constructor(previousOperandTextElement, currentOperandTextElement) {
      this.previousOperandTextElement = previousOperandTextElement
      this.currentOperandTextElement = currentOperandTextElement
      this.clear()
    }
  
    clear() {
      this.currentOperand = ''
      this.previousOperand = ''
      this.operation = undefined
    }
  
    delete() {
      this.currentOperand = this.currentOperand.toString().slice(0, -1)
    }
  
    appendNumber(number) {
      if (number === '.' && this.currentOperand.includes('.')) return
      this.currentOperand = this.currentOperand.toString() + number.toString()
    }
  
    chooseOperation(operation) {
      if (this.currentOperand === '') return
      if (this.previousOperand !== '') {
        this.compute()
      }
      this.operation = operation
      this.previousOperand = this.currentOperand
      this.currentOperand = ''
    }
  
    compute() {
      let computation
      const prev = parseFloat(this.previousOperand)
      const current = parseFloat(this.currentOperand)
      if (isNaN(prev) || isNaN(current)) return
      switch (this.operation) {
        case '+':
          computation = prev + current
          break
        case '-':
          computation = prev - current
          break
        case 'x':
          computation = prev * current
          break
        case 'รท':
          computation = prev / current
          break
        default:
          return
      }
      this.currentOperand = computation
      this.operation = undefined
      this.previousOperand = ''
    }
  
    getDisplayNumber(number) {
      const stringNumber = number.toString()
      const integerDigits = parseFloat(stringNumber.split('.')[0])
      const decimalDigits = stringNumber.split('.')[1]
      let integerDisplay
      if (isNaN(integerDigits)) {
        integerDisplay = ''
      } else {
        integerDisplay = integerDigits.toLocaleString('en', { maximumFractionDigits: 0 })
      }
      if (decimalDigits != null) {
        return `${integerDisplay}.${decimalDigits}`
      } else {
        return integerDisplay
      }
    }
  
    updateDisplay() {
      this.currentOperandTextElement.innerText =
        this.getDisplayNumber(this.currentOperand)
      if (this.operation != null) {
        this.previousOperandTextElement.innerText =
          `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`
      } else {
        this.previousOperandTextElement.innerText = ''
      }
    }
  }
  
  
  const numberButtons = document.querySelectorAll('.number')
  const operationButtons = document.querySelectorAll('.operation')
  const equalsButton = document.querySelector('.equals')
  const deleteButton = document.querySelector('.delete')
  const allClearButton = document.querySelector('.all-clear')
  const previousOperandTextElement = document.querySelector('.previous-operand')
  const currentOperandTextElement = document.querySelector('.current-operand')
  
  const calculator = new Calculator(previousOperandTextElement, currentOperandTextElement)
  
  numberButtons.forEach(button => {
    button.addEventListener('click', () => {
      calculator.appendNumber(button.innerText)
      calculator.updateDisplay()
    })
  })
  
  operationButtons.forEach(button => {
    button.addEventListener('click', () => {
      calculator.chooseOperation(button.innerText)
      calculator.updateDisplay()
    })
  })
  
  equalsButton.addEventListener('click', button => {
    calculator.compute()
    calculator.updateDisplay()
  })
  
  allClearButton.addEventListener('click', button => {
    calculator.clear()
    calculator.updateDisplay()
  })
  
  deleteButton.addEventListener('click', button => {
    calculator.delete()
    calculator.updateDisplay()
  })
  </script>
  
  <style>
  *, *::before, *::after {
    box-sizing: border-box;
  }
  
  body {
    padding: 0;
    margin: 0;
  }
  
  .calculator-grid {
    display: grid;
    justify-content: center;
    align-content: center;
    width: 390px;
    height: 450px;
    grid-template-columns: repeat(4, 97.5px);
    grid-template-rows: minmax(70px, 170px) repeat(5, 73px);
    background-color: black;
  }
  
  .calculator-grid > button {
    cursor: pointer;
    font-size: 35px;
    margin: 5px;
    background-color: rgb(40,40,40);
    border-radius: 15px;
    border: 0px;
  }
  
  .calculator-grid > button:active {
    background-color: rgb(20, 20, 20);
    border-radius: 15px;
  }
  
  .span-two {
    grid-column: span 2;
  }
  
  button {
    color: rgb(191,98,59);
  }
  
  .number {
    color: white;
  }
  
  .output {
    grid-column: 1 / -1;
    background-color: black;
    display: flex;
    align-items: flex-end;
    justify-content: space-around;
    flex-direction: column;
    padding: 10px;
    word-wrap: break-word;
    word-break: break-all;
  }
  
  .output .previous-operand {
    color: rgb(200, 200, 200);
    font-size: 20px;
  }
  
  .output .current-operand {
    color: white;
    font-size: 40px;
    overflow-y: hidden;
  }
  </style>